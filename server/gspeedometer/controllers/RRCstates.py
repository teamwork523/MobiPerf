#Copyright 2013 RobustNet Lab, University of Michigan. All Rights Reserved.
#
#Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
#in compliance with the License. You may obtain a copy of the License at
#
#http://www.apache.org/licenses/LICENSE-2.0
#
#Unless required by applicable law or agreed to in writing, software distributed under the License
#is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
#or implied. See the License for the specific language governing permissions and limitations under
#the License.
#!/usr/bin/python2.4
#



""" Store RRC inference and measurement related data in the database."""

__author__ = 'sanae@umich.edu (Sanae Rosen)'

from django.utils import simplejson as json
from google.appengine.ext import webapp

from gspeedometer import model
from gspeedometer.helpers import util
import logging
import urllib
import datetime
from google.appengine.api import taskqueue

class RRCStates(webapp.RequestHandler):
    """ Interact with RRC-related data stored in the database"""
  
    def uploadRRCInference(self, **unused_args):
        """Handler for uploadRRCInference request generated from client.
           Take the results of the RRC inference tasks and store them
           in the database. 
           Note that this is the result of *one* test, i.e. one sequence of
           three packets sent.  A set of tests with varying inter-packet 
           intervals can be identified by all having the same test_id."""

        getRRCInferenceReqParam = json.loads(self.request.body)
        
        #read all the json param sent from the client.
        rawdata = model.RRCInferenceRawData()
        # ID that uniquely identifies each phone, hashed
        rawdata.phone_id = util.HashDeviceId(\
            str(getRRCInferenceReqParam['phone_id']))
        # Test ID that is unique for each device and set of tests
        rawdata.test_id = getRRCInferenceReqParam['test_id']
        rawdata.network_type = getRRCInferenceReqParam['network_type']

        # Round trip times for the small packets
        rawdata.rtt_low = getRRCInferenceReqParam['rtt_low']
        # Round trip times for the large packets
        rawdata.rtt_high = getRRCInferenceReqParam['rtt_high']

        # number of packets lost for the small packets        
        rawdata.lost_low = getRRCInferenceReqParam['lost_low']
        # number of packets lost for the large packets
        rawdata.lost_high = getRRCInferenceReqParam['lost_high']

        # signal strength at the time the small packets were sent
        rawdata.signal_low = getRRCInferenceReqParam['signal_low']
        # signal strength at the time the large packets were sent
        rawdata.signal_high = getRRCInferenceReqParam['signal_high']

        # Error values currently not implemented
        rawdata.error_low = getRRCInferenceReqParam['error_low']
        rawdata.error_high = getRRCInferenceReqParam['error_high']
      
        # The corresponding inter-packet interval
        rawdata.time_delay = getRRCInferenceReqParam['time_delay']
        #get the current time in utc
        rawdata.timestamp = datetime.datetime.utcnow()

        #write to DB/model
        rawdata.put()
         
        return

    def uploadRRCInferenceSizes(self, **unused_args):
        """Handler for uploadRRCInferenceSizes requeste generated by client.
           Takes the results of the RRC size depencence task and stores 
           them in the database.

           Note that this is the result of *one* test, i.e. one sequence of
           three packets sent.  A set of tests with varying inter-packet 
           intervals can be identified by all having the same test_id."""       
 
        getRRCInferenceReqParam = json.loads(self.request.body)

        data = model.RRCInferenceSizesRawData()
        # ID that uniquely identifies each phone, hashed
        data.phone_id = util.HashDeviceId(\
            str(getRRCInferenceReqParam['phone_id']))

        # Test ID that is unique for each device and set of tests
        data.test_id = getRRCInferenceReqParam['test_id']
        data.network_type = getRRCInferenceReqParam['network_type']

        data.size = getRRCInferenceReqParam['size']
        data.result = getRRCInferenceReqParam['result']

        # The corresponding inter-packet interval
        data.time_delay = getRRCInferenceReqParam['time_delay']
        #get the current time in utc
        data.timestamp = datetime.datetime.utcnow()
        data.put()
        return
